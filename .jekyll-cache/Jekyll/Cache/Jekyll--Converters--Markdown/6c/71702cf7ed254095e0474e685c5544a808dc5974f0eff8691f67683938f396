I"6
<table>
  <tbody>
    <tr>
      <td>### 04</td>
      <td>深入浅出索引（下）</td>
    </tr>
  </tbody>
</table>

<p>在下列表T中，执行<code class="highlighter-rouge">select * from T where k betwee 3 and 5;</code>，需要执行几次树的搜索操作？</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; create table T (
ID int primary key,
k int NOT NULL DEFAULT 0, 
s varchar(16) NOT NULL DEFAULT '',
index k(k))
engine=InnoDB;

insert into T values(100,1, 'aa'),(200,2,'bb'),(300,3,'cc'),(500,5,'ee'),(600,6,'ff'),(700,7,'gg');
</code></pre></div></div>

<p><img src="036BC9532673427AA9B5E04C3615E437" alt="image" /></p>

<p><code class="highlighter-rouge">SQL</code>语句执行流程：</p>
<ol>
  <li>在k索引树上找到k值为3的记录，取得ID为300</li>
  <li>再到ID索引树上找到ID为300对应的R3记录</li>
  <li>在k索引树上找到k值为5的记录，取得ID为500</li>
  <li>再回到ID索引树上找到ID为500对应的R4记录</li>
  <li>在k索引树上找到k值为6的记录，不符合条件，结束循环</li>
</ol>

<p>在这个过程中，回到主键索引搜索树的过程，成为回表。</p>

<p>在这个例子中，由于查询结果所需要的数据只有主键索引上有，所以不得不回表。如果执行的语句是<code class="highlighter-rouge">select ID from T where k between 3 and 5;</code>，只需要查询ID的值，而k索引树上有这个值，不需要回表，索引k已经覆盖了查询所需要的值，成为<strong>覆盖索引</strong>。</p>

<p><strong>覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</strong></p>

<p>联合索引：将多个字段设置为索引，在B+树上符合最左前缀原则。</p>
:ET