I"#<ul id="markdown-toc">
  <li><a href="#02--日志系统一条sql更新语句是如何执行的" id="markdown-toc-02--日志系统一条sql更新语句是如何执行的">02 | 日志系统：一条SQL更新语句是如何执行的？</a></li>
  <li><a href="#redo-log" id="markdown-toc-redo-log"><code class="highlighter-rouge">redo log</code></a></li>
  <li><a href="#binlog" id="markdown-toc-binlog"><code class="highlighter-rouge">binlog</code></a></li>
</ul>

<h3 id="02--日志系统一条sql更新语句是如何执行的">02 | 日志系统：一条SQL更新语句是如何执行的？</h3>
<h3 id="redo-log"><code class="highlighter-rouge">redo log</code></h3>

<p><code class="highlighter-rouge">redo log</code>：重做日志。每当有操作时，在数据变更之前将操作写入<code class="highlighter-rouge">redo log</code>，这样当发生掉电之类的情况时系统可以在重启后继续操作
<code class="highlighter-rouge">undo log</code>：称为撤销日志，当一些变更执行到一半无法完成时，可以根据撤销日志恢复到变更之间的状态。</p>

<p><code class="highlighter-rouge">redo log</code>位于存储引擎层，<code class="highlighter-rouge">InnoDB</code>中有使用。<code class="highlighter-rouge">InnoDB</code>的<code class="highlighter-rouge">redo log</code>是固定大小，比如配置一组4个文件，每个文件的大小为1G，那么总共可以记录4GB的操作。从头开始写，写到末尾就又回到开头循环写。</p>
<ul>
  <li><code class="highlighter-rouge">write pos</code>：当前记录的位置，一边写一边后移</li>
  <li><code class="highlighter-rouge">checkpoint</code>：当前要擦除的位置，是往后推移并且循环的，擦出记录前要把记录更新到数据文件</li>
</ul>

<p><em><code class="highlighter-rouge">write pos</code>和<code class="highlighter-rouge">checkpoint</code>之前是日志还空着的部分，可以用来记录新的操作。如果<code class="highlighter-rouge">write pos</code>追上<code class="highlighter-rouge">checkpoint</code>，表示日志满了，这时候不能再执行新的更新，得停下来先擦掉一些记录。</em></p>

<p><strong>有了<code class="highlighter-rouge">redo log</code>，<code class="highlighter-rouge">InnoDB</code>就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力成为<code class="highlighter-rouge">crash-safe</code>。</strong></p>

<p><code class="highlighter-rouge">WAL</code>：<code class="highlighter-rouge">Write-Ahead Loggin</code>，预写日志系统。在使用WAL的系统中，所有的修改都先被写入到日志中，然后再被应用到系统状态中。通常包含redo和undo两部分信息。
具体来说，当有一条记录需要更新的时候，<code class="highlighter-rouge">InnoDB</code>引擎就会先把记录写到<code class="highlighter-rouge">redo log</code>里面，并更新内存，这个时候更新就算完成了。同时，<code class="highlighter-rouge">InnoDB</code>引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是系统比较空闲的时候做。</p>

<h3 id="binlog"><code class="highlighter-rouge">binlog</code></h3>
<p>归档日志，位于<code class="highlighter-rouge">Server</code>层。</p>

<p>为什么会有两份日志？<br />
最开始<code class="highlighter-rouge">MySQL</code>里并没有<code class="highlighter-rouge">InnoDB</code>引擎。MySQL自带的引擎是MyISAM，但是MyISAM没有crash-safe的能力，binlog日志只能用于归档。而InnoDB是另一个公司以插件形式引入MySQL的，既然只依靠binlog是没有crash-safe能力的，所以InnoDB使用另一套日志系统也就是redo log来实现crash-safe能力。</p>

<p>和<code class="highlighter-rouge">redo log</code>差别：</p>
<ol>
  <li><code class="highlighter-rouge">redo log</code>是<code class="highlighter-rouge">InnoDB</code>引擎特有的，<code class="highlighter-rouge">binlog</code>是MySQL的Server层实现的，所有引擎都可以使用。</li>
  <li><code class="highlighter-rouge">redo log</code>是物理日志，记录的是“在某个数据页上做了什么修改”；<code class="highlighter-rouge">binlog</code>是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID=2这一行的c字段加1”。</li>
  <li><code class="highlighter-rouge">redo log</code>是循环写的，空间固定会用完，<code class="highlighter-rouge">binlog</code>是可以追加写入的，指的是写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li>
</ol>

<p>误删表后的操作：</p>
<ol>
  <li>找到最近一次的全量备份，从这个备份恢复到临时库</li>
  <li>从备份的时间点开始，将备份的<code class="highlighter-rouge">binlog</code>依次取出来，重放到删除误删除的时刻</li>
</ol>

<p><strong><code class="highlighter-rouge">MySQL</code>的<code class="highlighter-rouge">binlog</code>日志可以用于误操作后的数据恢复工作以及主从复制一致性的工作。</strong></p>
:ET