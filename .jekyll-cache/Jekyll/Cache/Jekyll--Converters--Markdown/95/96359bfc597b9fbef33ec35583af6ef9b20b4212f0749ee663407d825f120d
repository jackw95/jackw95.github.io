I""<ul id="markdown-toc">
  <li><a href="#正则表达式" id="markdown-toc-正则表达式">正则表达式</a></li>
</ul>

<h4 id="正则表达式">正则表达式</h4>
<p>英文为<code class="highlighter-rouge">Regular expression</code>，简称：<code class="highlighter-rouge">regex</code>或<code class="highlighter-rouge">regexp</code>。<br />
含义：按照某种规则去匹配符合条件的字符串</p>

<p>正则表达式由两种基本字符类型构成：</p>
<ul>
  <li>原义文本字符</li>
  <li>元字符</li>
</ul>

<p>元字符是在正则表达式中有特殊含义的非字母字符：<code class="highlighter-rouge">*</code> <code class="highlighter-rouge">+</code> <code class="highlighter-rouge">?</code> <code class="highlighter-rouge">^</code> <code class="highlighter-rouge">$</code> <code class="highlighter-rouge">.</code> <code class="highlighter-rouge">|</code> <code class="highlighter-rouge">\</code> <code class="highlighter-rouge">()</code> <code class="highlighter-rouge">{}</code> <code class="highlighter-rouge">[]</code>等</p>

<p><strong>常用字符集</strong>：<br />
<code class="highlighter-rouge">\t</code>：水平制表符<br />
<code class="highlighter-rouge">\v</code>：垂直制表符<br />
<code class="highlighter-rouge">\n</code>：换行符<br />
<code class="highlighter-rouge">\r</code>：回车符<br />
<code class="highlighter-rouge">\0</code>：空字符<br />
<code class="highlighter-rouge">\f</code>：换页符<br />
<code class="highlighter-rouge">|</code>：或</p>

<p><strong>字符类</strong>：<br />
由元字符<code class="highlighter-rouge">[]</code>创建。字符类取反：由<code class="highlighter-rouge">^</code>创建，反向类，<code class="highlighter-rouge">[^123]</code>表示不是字符<code class="highlighter-rouge">1</code>或<code class="highlighter-rouge">2</code>或<code class="highlighter-rouge">3</code>的内容</p>

<p><strong>范围类</strong>：<br />
<code class="highlighter-rouge">[a-z]</code>：来连接两个字符表示从<code class="highlighter-rouge">a</code>到<code class="highlighter-rouge">z</code>的任意字符</p>

<p><strong>预定义类</strong>：<br />
<code class="highlighter-rouge">.</code>：<code class="highlighter-rouge">[^\r\n]</code>，除了回车符和换行符之外的所有字符<br />
<code class="highlighter-rouge">\d</code>：<code class="highlighter-rouge">[0-9]</code>，数字字符<br />
<code class="highlighter-rouge">\D</code>：<code class="highlighter-rouge">[^0-9]</code>，非数字字符<br />
<code class="highlighter-rouge">\s</code>：<code class="highlighter-rouge">[\t\n\x0B\f\r]</code>，空白符<br />
<code class="highlighter-rouge">\S</code>：<code class="highlighter-rouge">[^\t\n\x0B\f\r]</code>，非空白符<br />
<code class="highlighter-rouge">\w</code>：<code class="highlighter-rouge">[a-zA-Z0-9_]</code>，单词字符（字母、数字、下划线）<br />
<code class="highlighter-rouge">\W</code>：<code class="highlighter-rouge">[^a-zA-Z0-9_]</code>，非单词字符</p>

<p><strong>边界</strong>：<br />
<code class="highlighter-rouge">^</code>：开始标记，以<code class="highlighter-rouge">xx</code>开始<br />
<code class="highlighter-rouge">$</code>：结束标记，以<code class="highlighter-rouge">xx</code>结束<br />
<code class="highlighter-rouge">\b</code>：单词边界<br />
<code class="highlighter-rouge">\B</code>：非单词边界</p>

<p><strong>量词</strong>：<br />
<code class="highlighter-rouge">?</code>：出现<code class="highlighter-rouge">0</code>次或<code class="highlighter-rouge">1</code>次<br />
<code class="highlighter-rouge">+</code>：出现<code class="highlighter-rouge">1</code>次或多个<br />
<code class="highlighter-rouge">*</code>：出现<code class="highlighter-rouge">0</code>次或多次（任意次）<br />
<code class="highlighter-rouge">{n}</code>：出现<code class="highlighter-rouge">n</code>次<br />
<code class="highlighter-rouge">{n,}</code>：出现<code class="highlighter-rouge">n</code>次或<code class="highlighter-rouge">n</code>次以上，当<code class="highlighter-rouge">n</code>为<code class="highlighter-rouge">0</code>时等价于<code class="highlighter-rouge">*</code>，<code class="highlighter-rouge">n</code>为<code class="highlighter-rouge">1</code>时等价于<code class="highlighter-rouge">+</code><br />
<code class="highlighter-rouge">{n,m}</code>：出现<code class="highlighter-rouge">n</code>次到<code class="highlighter-rouge">m</code>次，当<code class="highlighter-rouge">n</code>为<code class="highlighter-rouge">0</code>且<code class="highlighter-rouge">m</code>为<code class="highlighter-rouge">1</code>时等价于<code class="highlighter-rouge">?</code></p>

<p><strong>贪婪模式和非贪婪模式</strong><br />
正则表达式默认是贪婪模式，当使用量词进行匹配时，会尽可能匹配多的。</p>

<p>非贪婪模式：让正则表达式尽可能少的匹配，也就是说一旦成功匹配不再继续尝试。
在量词后面加上<code class="highlighter-rouge">?</code>即可</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'123456789'.match(/\d{3,5}?/g)

result：{'123', '456', '789'}
</code></pre></div></div>

<p><strong>分组()</strong><br />
忽略分组：<code class="highlighter-rouge">(?: Byron).(ok)</code></p>

<p><strong>前瞻后顾</strong><br />
正向前瞻：<code class="highlighter-rouge">exp(?=assert)</code><br />
负向前瞻：<code class="highlighter-rouge">exp(?!assert)</code><br />
正向后顾：<code class="highlighter-rouge">exp(?&lt;=assert)</code><br />
负向后顾：<code class="highlighter-rouge">exp(?&lt;!assert)</code></p>

<p><strong>对象属性</strong></p>
<ul>
  <li><code class="highlighter-rouge">global</code>：是否全文搜索，默认<code class="highlighter-rouge">false</code></li>
  <li><code class="highlighter-rouge">ignore case</code>：是否大小写敏感，默认<code class="highlighter-rouge">false</code></li>
  <li><code class="highlighter-rouge">multiline</code>：多行搜索，默认值是<code class="highlighter-rouge">false</code></li>
  <li><code class="highlighter-rouge">lastindex</code>：是当前表达式匹配内容的最后一个字符的下一个位置</li>
  <li><code class="highlighter-rouge">source</code>：正则表达式的文本字符串</li>
</ul>
:ET