I"#0<ul id="markdown-toc">
  <li><a href="#javascript简介" id="markdown-toc-javascript简介"><code class="highlighter-rouge">javascript</code>简介</a></li>
</ul>

<h4 id="javascript简介"><code class="highlighter-rouge">javascript</code>简介</h4>

<p><em><code class="highlighter-rouge">javascript</code>俗称<code class="highlighter-rouge">js</code>，<code class="highlighter-rouge">js</code>的正式名称是<code class="highlighter-rouge">ECMAScript</code>，是网景公司<code class="highlighter-rouge">Netscape</code>公司开发的一种基于客户端浏览器、基于面向对象、事件驱动式的网页脚本语言。主要用于：交互式操作，表单验证，网页特效，<code class="highlighter-rouge">web</code>游戏，服务器脚本开发等；</em></p>

<p><strong>特点</strong></p>

<ul>
  <li><code class="highlighter-rouge">js</code>是一种解释性脚本编程语言</li>
  <li><code class="highlighter-rouge">js</code>是基于对象的脚本编程语言</li>
  <li>简单性</li>
  <li>安全性（不能访问本地硬盘）</li>
  <li>动态性的</li>
  <li>跨平台性（依赖浏览器，与操作系统无关）</li>
</ul>

<p><strong>三种使用方法</strong></p>

<p>(1)使用<code class="highlighter-rouge">onclick</code>:属性构建执行<code class="highlighter-rouge">js</code>代码</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;a href="#" onclick="alert(1)"&gt;点击&lt;/a&gt;
</code></pre></div></div>

<p>(2)使用<code class="highlighter-rouge">&lt;script../&gt;</code>标签来包含<code class="highlighter-rouge">js</code>代码</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;script type="text/javascript"&gt;
	alert('Hello, world');
&lt;/script&gt;
</code></pre></div></div>

<p>(3)导入外部的<code class="highlighter-rouge">javascript</code>文件，让<code class="highlighter-rouge">html</code>页面和<code class="highlighter-rouge">js</code>脚本分离</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;script src="outer.js" type="text/javascript"&gt;&lt;/script&gt;
</code></pre></div></div>

<hr />

<p>####<strong><code class="highlighter-rouge">javascript</code>变量和数据类型</strong>
<code class="highlighter-rouge">js</code>是弱类型脚本语言，使用变量之前，可以无需定义，当使用某个变量的时候直接使用即可。主要分为以下两种定义方式： 
(1)隐式定义：直接给变量赋值(隐式变量声明的时候必须赋初值) 
` a = 10;<code class="highlighter-rouge">
(2)显示定义：使用</code>var<code class="highlighter-rouge">关键字定义变量(使用之前必须赋初值，不然会报</code>undefined<code class="highlighter-rouge">错误) 
</code>var a = 10;`</p>

<p>**变量命名规则： **</p>

<ul>
  <li>首字母必须是字母、下划线或者<code class="highlighter-rouge">$</code>符号。</li>
  <li>余下的字母可以是下划线、<code class="highlighter-rouge">$</code>、任意字母或数字。</li>
  <li>变量名不能使用关键字</li>
  <li>变量名对大小写敏感。</li>
</ul>

<p><code class="highlighter-rouge">js</code>是弱类型脚本语言，声明变量时无需指明变量的数据类型，<code class="highlighter-rouge">js</code>是解释时动态决定的，数据保存在内存中时也是有数据类型的，<strong>常用数据类型</strong>如下：</p>

<ul>
  <li>数值类型(<code class="highlighter-rouge">number</code>)：包含整数和浮点数</li>
  <li>布尔类型(<code class="highlighter-rouge">boolean</code>)：只有<code class="highlighter-rouge">true</code>或<code class="highlighter-rouge">false</code>两个值</li>
  <li>字符串类型(<code class="highlighter-rouge">string</code>)：字符串必须用单引号或双引号括起来</li>
  <li>对象类型(<code class="highlighter-rouge">object</code>)</li>
  <li>数组类型（<code class="highlighter-rouge">array</code>）</li>
  <li>未定义类型(<code class="highlighter-rouge">undefined</code>)：专门用来确定一个已经创建但是没有初值的变量</li>
  <li>空类型(<code class="highlighter-rouge">null</code>)：用来表明某个变量的值为空</li>
  <li><code class="highlighter-rouge">NaN</code>：非数值型</li>
</ul>

<p>注：<code class="highlighter-rouge">undefined</code>和<code class="highlighter-rouge">null</code>的值相等，类型不同。 两个字符串是否相等，可用<code class="highlighter-rouge">==</code>来判断。</p>

<p>**数据类型转换： **</p>

<p><code class="highlighter-rouge">+</code>号或者<code class="highlighter-rouge">toString()</code>：数值<code class="highlighter-rouge">number</code>类型转换成字符串 
<code class="highlighter-rouge">parseInt()</code>：将字符串转为整型 
<code class="highlighter-rouge">parseFloat()</code>：将字符串转换为浮点型</p>

<p>**注意： **</p>

<p><code class="highlighter-rouge">parseInt('67red') -&gt; 67</code>(字符串转为整型的时候会自动截取前面的数字，后面的忽略)
<code class="highlighter-rouge">parseInt('red67') -&gt; NaN</code>(字符串前面没有数字，会报<code class="highlighter-rouge">not a number</code>错误)</p>

<p>####<strong>字符串常用方法：</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>stringObject.charAt(index)：获取字符串特定索引处的字符 
index：下标(如果不在0～stringObject.length-1的范围内，返回'') 
返回值：string

stringObject.toUpperCase()：将字符串的所有字符转换成大写字母 
返回值：string

stringObject.toLowerCase()：将字符串的所有字符转换成小写字母 
返回值：string

stringObject.substring(start, end)：提取字符串中介于两个指定下标之间的字符 
start：必须，字符串中开始位置 
end：非必需，字符串中结束位置，如果不指定，会一直到字符串的结尾 
返回值：string

arrayObject.slice(start, end)：提取字符串中介于两个指定下标之间的字符，可指定负数 
start：必须，字符串中开始位置 
end：非必需，字符串中结束位置，如果不指定，会一直到字符串的结尾 
返回值：string

stringObject.indexOf(searchvalue,fromindex)：返回某个指定的字符串值在字符串中首次出现的位置 
searchvalue：必须，需要查找的字符串 
fromindex：非必须，字符串的指定位置，如果不指定，会从字符串的开始位置开始查找 
返回值：number

stringObject.replace(regexp/substr,replacement)：将字符串中的某个子串以特定的字符串替换 
regexp/substr：需要替换的字符串 
replacement：替换字符串的值 
返回值：string

stringObject.split(separator,limit)： 
separator	必需，分隔符 
limit 可选。该参数可指定返回的数组的最大长度，如果不指定，整个字符串都会被分割 
返回值：string数组

stringObject.concat(str1, str2...)：用于将多个字符串拼加成一个字符串 
str1：字符串 
返回值：string
</code></pre></div></div>

<p>**注意： **</p>

<ul>
  <li>用字符串做加法的时候，会做字符串拼接工作</li>
  <li>用字符串做减法、乘法、除法的时候，会将字符串转换成数值类型进行减法、乘法、除法运算</li>
</ul>

<p>####<strong><code class="highlighter-rouge">js</code>数组</strong></p>

<p>三种定义数组的方法： 
(1)定义时直接给数组变量赋值 
<code class="highlighter-rouge">var arr = [1, 2, 3];</code>
(2)定义一个空数组 
<code class="highlighter-rouge">var arr = [];</code>
(3)用<code class="highlighter-rouge">new</code>方法定义数组 
<code class="highlighter-rouge">var arr = new Array();</code></p>

<p>特点：</p>

<ul>
  <li>数组长度可变</li>
  <li>同一数组中的元素类型可以互不相同</li>
  <li>当访问未赋值的数组元素时，该元素值为<code class="highlighter-rouge">undefined</code>，不会数组越界</li>
</ul>

<p><em><code class="highlighter-rouge">js</code>里面没有数组越界的概念，会显示<code class="highlighter-rouge">undefined</code></em></p>

<p>####<strong><code class="highlighter-rouge">js</code>运算符</strong></p>

<p>算术运算符：<code class="highlighter-rouge">+ - * / % ++ --</code>
赋值运算符：<code class="highlighter-rouge">=</code>
比较运算符：<code class="highlighter-rouge">&gt; &lt; &gt;= &lt;= == != === !==</code>
逻辑运算符：<code class="highlighter-rouge">&amp;&amp; || !</code>
位运算符：<code class="highlighter-rouge">&amp; | ~ ^ &lt;&lt; &gt;&gt;</code>
其他运算符：三目运算符(<code class="highlighter-rouge">?:</code>) 
<code class="highlighter-rouge">void</code>运算符：强行指定某个表达式的不会返回值
            <code class="highlighter-rouge">typeof</code> 运算符：获取某个变量的数据类型
    		 <code class="highlighter-rouge">instanceof</code>运算符：判断某个变量的数据类型是否为指定的数据类型
    		 <code class="highlighter-rouge">var a = void 3;  //输出为undefined</code>
    		 <code class="highlighter-rouge">document.write(typeof(str));  //输出为string</code>
    		 ` alert(arr instanceof Array);  //输出为true`</p>

<p>注意：<code class="highlighter-rouge">js</code>中没有继承的概念，所有的对象的父类都是<code class="highlighter-rouge">object</code></p>

<p>####<strong><code class="highlighter-rouge">js</code>流程控制</strong></p>

<p><code class="highlighter-rouge">js</code>支持的分支语句主要有<code class="highlighter-rouge">if</code>和<code class="highlighter-rouge">switch</code>语句。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if(条件){
	//表达式
}else{
	//表达式
}

//注意：switch中表达式的值可以是number类型，也可以是string类型
switch(表达式){
	case 值1: //表达式 break;
	case 值1: //表达式 break;
	...
	default://表达式;

}
</code></pre></div></div>

<p><code class="highlighter-rouge">js</code>支持的循环语句主要有<code class="highlighter-rouge">while</code>循环，<code class="highlighter-rouge">do-while</code>循环，<code class="highlighter-rouge">for</code>循环，<code class="highlighter-rouge">for-in</code>循环</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//先判断，后执行
while(循环条件){
	//表达式
}

//先执行，后判断，至少执行一次
do{
	//表达式
}while(循环条件)

//当循环次数确定的情况下，一般用for循环，更简洁
for(表达式1; 表达式2; 表达式3){
	//表达式
}

//可用于遍历对象，比如数组(数组遍历的是下标，对象遍历的是属性，注意：都不是具体的值)
for(变量 in 对象){
	//表达式
}

//遍历的是下标
var arr = [1, 2, 3, 4, 5];
			arr[5] = 10;
			arr[10] = 11;

for(var a in arr){
	document.write(arr[a]+'	');
}
</code></pre></div></div>

<p><code class="highlighter-rouge">js</code>提供了<code class="highlighter-rouge">break</code>和<code class="highlighter-rouge">continue</code>来改变循环的控制流</p>

<ul>
  <li><code class="highlighter-rouge">break</code>：跳出该层循环</li>
  <li><code class="highlighter-rouge">continue</code>：结束该层循环的本次循环</li>
</ul>

<p>常用的特殊语句</p>

<p>语句是<code class="highlighter-rouge">js</code>的基本执行单元，每条语句都是以分号结束，语句了前面的赋值语句、算术运算等语句之外，还有一些特殊语句。</p>

<ul>
  <li>语句块(包含在一对大括号里)</li>
  <li>空语句(使用运用比较少)</li>
  <li>异常抛出语句
  <code class="highlighter-rouge">throw new Error('异常抛出');</code></li>
  <li>异常捕捉语句
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  try{
  	var age = 5;
  	if(age == 5){
  		throw new Error('异常抛出');
  	}
  }catch(e){
  	document.write('出错:'+e.message);
  }finally{
  	document.write('总会执行的finally块');
  }
</code></pre></div>    </div>
  </li>
</ul>
:ET